---
title: "Capstone - Principal Component Analysis"
author: "Nick Belgau, Oscar Hernandez Mata"
date: '`r Sys.Date()`'
format:
  html:
    code-fold: true
course: STA 6257 - Advanced Statistical Modeling
bibliography: references.bib # file contains bibtex for references
#always_allow_html: true # this allows to get PDF with HTML features
self-contained: true
execute: 
  warning: false
  message: false
editor: 
  markdown: 
    wrap: 72
---


### Application 1: General Dimensionality Reduction
Load required libraries:
```{r}
library(readxl)
library(skimr)
library(dplyr)
library(ggplot2)
library(corrplot)
library(scales)
library(DescTools)
library(reshape2)
library(factoextra)
library(readr)
library(kableExtra)
library(rrcov)
library(psych)

library(corrplot)
library(gridExtra)

```

1.  **Dataset Description**

The dataset contains demographic, health, and environmental metrics for counties in Florida (FL) and Georgia (GA). Each row represents data for a specific county, and the selected columns are:

- County: Name of the county.
- State: State abbreviation (FL or GA).
- obesity_age_adj: Age-adjusted obesity rate.
- Smoking_Rate: Rate of smoking within the population.
- physical_inactivity: Rate of physical inactivity.
- Diabetes: Diabetes prevalence rate.
- Heart_Disease: Heart disease prevalence rate.
- Cancer: Cancer prevalence rate.
- NATA_Cancer_11: National-Scale Air Toxics Assessment (NATA) cancer risk for 2011.
- Poverty_Percent: Percentage of the population living below the poverty line.

```{r}
url <- "https://raw.githubusercontent.com/nickbelgau/STA6257_PCA/main/data/Alz_mortality_data_complete_with_state_csv.csv"
data_raw <- read_csv(url)
```


2.  **Filtered Dataset and Inspection**

```{r}
selected_columns <- c(
  "County", "State", "obesity_age_adj", "Smoking_Rate", "Diabetes", "Heart_Disease", "Cancer",  "Mercury_TPY", "Lead_TPY", "Food_index", "Poverty_Percent", "Atrazine_High_KG", "SUNLIGHT"
)

deep_south_states <- c("AL", "AR", "FL", "GA", "LA", "MS", "NC", "SC", "TN", "TX", "VA")

data <- data_raw %>%
  filter(State %in% deep_south_states) %>%
  select(all_of(selected_columns))

data <- data %>%
  select(-County, -State)
```


The correlation matrix plots show enough of a relationship between variables to meet the assumption of linearity.

4.  **Outliers analysis**
```{r}
# Loop through each column and create a boxplot
for (i in names(data)) {
  print(boxplot(data[[i]], main = paste("Boxplot of", i), ylab = "Values", col = "lightblue"))
}

```


```{r}
library(tidyr)
# Gather the data for ggplot2
data_long <- data %>%
  gather(key = "variable", value = "value")

# Create boxplots for each variable
ggplot(data_long, aes(x = variable, y = value)) +
  geom_boxplot(outlier.colour = "red", outlier.shape = 16, outlier.size = 2) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 10),
        strip.text.x = element_text(size = 10)) +
  labs(title = "Boxplot for Outlier Detection",
       x = "Variable",
       y = "Value") +
  facet_wrap(~ variable, scales = "free_y")
```
```{r}
# Function to identify outliers and their row indices
identify_outliers <- function(data, variable) {
  value <- data[[variable]]
  Q1 <- quantile(value, 0.25, na.rm = TRUE)
  Q3 <- quantile(value, 0.75, na.rm = TRUE)
  IQR <- Q3 - Q1
  lower_bound <- Q1 - 1.5 * IQR
  upper_bound <- Q3 + 1.5 * IQR
  outliers <- value < lower_bound | value > upper_bound
  if(any(outliers)) {
    return(data.frame(Variable = variable, Value = round(value[outliers], 2), Row_Index = which(outliers)))
  } else {
    return(NULL)
  }
}

# Apply the function to each variable and combine the results
outliers_list <- lapply(selected_columns, function(var) identify_outliers(data, var))
outliers_table <- do.call(rbind, outliers_list)

# Avoid scientific notation
options(scipen = 999)

# Display the outliers table
print(outliers_table)
```

```{r}
data_transformed <- log(sqrt(data + 1))
```

```{r}

data_long2 <- data_transformed %>%
  gather(key = "variable", value = "value")


# Create boxplots for each variable
ggplot(data_long2, aes(x = variable, y = value)) +
  geom_boxplot(outlier.colour = "red", outlier.shape = 16, outlier.size = 2) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 10),
        strip.text.x = element_text(size = 10)) +
  labs(title = "Boxplot for Outlier Detection",
       x = "Variable",
       y = "Value") +
  facet_wrap(~ variable, scales = "free_y")

```



5.  **Run Principal Component Analysis**

```{r}
pca_result <- prcomp(data_transformed, center = TRUE, scale. = TRUE)

pca_summary <- summary(pca_result)
importance <- as.data.frame(pca_summary$importance)
importance <- t(importance) # transpose to make cleaner
colnames(importance) <- c("Std Dev", "Proportion", "Cumulative Var")
importance
```

View the PCA components (loadings)
```{r}
pca_result$rotation
```

Screeplot
```{r}
plot(pca_result, type = "l", col = "#215B9D", lwd = 2)
```
Elbow method

note: from library (ggfortify::autoplot)

Biplot
```{r}
# biplot(pca_result, 
#        col = c("grey", "#215B9D"), #"#D3D3D3"
#        cex = 0.3,
#        arrow.len = 0.15,              # Length of arrows (default is 0.1)
#        main = "PCA Biplot")  

autoplot(pca_result, 
         data = data,
         colour = 'grey',  # Color for points
         loadings = TRUE,  # Show loadings
         loadings.colour = '#215B9D',  # Color for arrows
         loadings.label = TRUE,  # Show labels for loadings
         loadings.label.colour = 'black', 
         loadings.label.size = 3) +  # Increase the size of the labels
  theme_minimal() +  # Use a minimal theme for cleaner appearance
  theme(legend.position = "none")  # Remove legend for simplicity
```
In one of these applications, discuss how PCA aids in building more robust statistical models by reducing multicollinearity and enhancing model interpretability.
Compare VIF (variance inflation factor) before and after PCA.

```{r}
# Perform PCA with Varimax rotation
pca_with_rotation <- principal(data_transformed, nfactors = ncol(data_transformed), rotate = "varimax", scores = TRUE)

# Summary of PCA with rotation
print(pca_with_rotation)


# Plot the proportion of variance explained
fa.diagram(pca_with_rotation)

```


### Application 2: Image Compression  

New example.
No scree plot or biplot because pixels.
Results to focus on memory reduction and maintaining equivalent level of performance.
This will be similar to appl 1 + 2 but without going into as much detail for techniques already demonstrated.

## Conclusion  

Summary, reflections, future discissions

